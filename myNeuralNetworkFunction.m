function [Y,Xf,Af] = myNeuralNetworkFunction(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 07-Oct-2018 07:58:32.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 6xQ matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-57.3687951838875;-65.282640599125;-14.0203655093771;-14.0172891869037;-8.78401579846274;-8.41299629632071];
x1_step1.gain = [0.0178470617861598;0.0156835633921663;0.0713348436764619;0.0713344629708025;0.115855406335098;0.115710542685572];
x1_step1.ymin = -1;

% Layer 1
b1 = [2.106428775671815;1.6300117368471829;1.0376805483767042;-0.87210484857724313;0.15842665263627648;-0.001187667094148295;-1.2832631962178263;1.1118379065040047;1.4455830544612331;2.2179559424604744];
IW1_1 = [-1.0078972446735335 -1.0084116870338948 0.73788880375754595 0.42939238259837886 0.061867169016279561 1.0518325131743507;-0.9210047202915751 -0.47179793612306725 0.86568075444827575 -0.610825910116779 -1.2724620789750247 -0.6406292781499161;-0.77536072297534353 0.4081239701713591 1.4686421809844217 -0.66354870661984455 0.99080229265415065 0.082599020983240554;0.96176939515198212 -0.24619652823942348 0.14451872556083264 -0.55531048356464408 -1.3005406458190627 -1.0203394083404558;-0.40703127778456882 -0.94537991660579457 -0.65050813824728981 -0.71792380485889506 -1.0454914912530606 1.224872263746005;0.086136773376469897 -0.73895423297771112 0.96533733807246547 -0.35989940455688207 -0.2057866164467082 0.13003869914532681;-0.47643079715425707 -0.96705082616374372 0.42100482653005045 -0.7322352517283206 0.58165888159651957 -1.059767266036872;1.1652516527951067 -0.36477740206028725 0.17218441829793449 0.63878843220210824 0.65366024468767525 -0.63473173365626412;0.20074615228697912 0.33786720427302908 0.64507244262738761 -0.71625764914299916 0.65830557271297607 1.5483858692573664;0.81089072408346363 -0.84567254667914171 -1.0528950571789983 -0.66334974875749741 -0.85909938646367745 -1.222779254925124];

% Layer 2
b2 = 0.44812203764737907;
LW2_1 = [0.21027910297882915 -0.12346786655034134 -0.5547400234353822 -0.076595464501927335 -0.39579486145671083 -0.82700034036044712 0.10436594068526589 -0.29325860036665674 0.13173833988623074 0.1108029574151457];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.56801186997936;
y1_step1.xoffset = -1.84267792527949;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},2); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
